---
title: "Visualize genes from RNAseq data that are related to specific GO terms"
date: "`r Sys.time()`"
format: 
  html:
    embed-resources: true
fig-format: svg
fig-height: 8
---

```{css, echo = FALSE}
.scrolling {
max-height: 6;
max-width: 100%;
overflow-x: scroll;
overflow-y: scroll;
}

.scrolling_y {
max-height: 500px;
overflow-y: scroll;
}

.scrolling_x {
max-width: 100%;
overflow-x: auto;
}
```

This script

1) Read a tabular config file for different GO term sets

Config file format: TAB delimited file

```         
<deg> <GO> <title> <output>
```

deg: DEG ID from RNAseq_info\
GO: a ; separated GO term IDs\ 
title: plot title\
output: a suffix for output file

2) Generate the heatmap for genes belonging to the GO terms

## Initial setup

```{r}
#| label: setup
#| warning: false

suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggrepel))
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(circlize))
suppressPackageStartupMessages(library(here))
suppressPackageStartupMessages(library(GO.db))
suppressPackageStartupMessages(library(org.DRerio.GRCz11.Ensembl97.eg.db))

rm(list = ls())

source("https://raw.githubusercontent.com/lakhanp1/omics_utils/main/RNAseq_scripts/DESeq2_functions.R")
source("https://raw.githubusercontent.com/lakhanp1/omics_utils/main/GO_enrichment/enrichment_functions.R")

###########################################################################

# whether to visualize all genes linked to given GO terms (FALSE) or
# only genes from the GO enrichment result table (TRUE)
viewOnlyEnrichedGenes <- TRUE

# row number of the set to plot from the config file
setRow <- 1

diffDataPath <- here::here("analysis", "02_DESeq2_diff")
file_sampleInfo <- here::here("data", "reference_data", "sample_info.txt")
file_RNAseq_info <- here::here("data", "reference_data", "DESeq2_DEG_info.txt")

file_goSet <- paste(diffDataPath, "/RNAseq_GO_geneset.config.tab", sep = "/")

orgDb <- org.DRerio.GRCz11.Ensembl97.eg.db

col_lfc <- "log2FoldChange"
col_fdr <- "padj"
col_geneId <- "GID"
col_geneName <- "GENE_NAME"

cutoff_fdr <- 0.05
cutoff_lfc <- 0.585
cutoff_up <- cutoff_lfc
cutoff_down <- -1 * cutoff_lfc

```

## Import data

```{r}
## prepare data
sampleInfo <- suppressMessages(readr::read_tsv(file = file_sampleInfo))

termSet <- suppressMessages(readr::read_tsv(file = file_goSet))

degResult <- termSet$deg[setRow]

outDir <- paste(diffDataPath, "/", degResult, "/geneset_plots", sep = "")
plotTitle <- paste(degResult, ":", termSet$title[setRow])
outPrefix <- paste(outDir, "/", degResult, ".GO_geneset.", termSet$output[setRow], sep = "")

if(!dir.exists(outDir)){
  dir.create(outDir)
}

rnaseqInfo <- get_diff_info(degInfoFile = file_RNAseq_info, dataPath = diffDataPath) %>% 
  dplyr::filter(comparison == degResult)

sampleIds <- unlist(strsplit(x = rnaseqInfo$samples, split = ";"))

diffData <- suppressMessages(readr::read_tsv(file = rnaseqInfo$deg[1])) 

normCounts <- suppressMessages(readr::read_tsv(file = rnaseqInfo$normCount[1])) %>% 
  dplyr::select(geneId, !!!sampleIds)

rldCounts <- suppressMessages(readr::read_tsv(file = rnaseqInfo$rld[1])) %>% 
  dplyr::select(geneId, !!!sampleIds)


goTerms <- unlist(strsplit(x = termSet$go[setRow], split = ";"))


goGenes <- AnnotationDbi::select(
  x = orgDb, keys = goTerms, columns = c("GID"), keytype = "GOALL"
) %>% 
  dplyr::rename(
    geneId = GID,
    termId = GOALL
  )

if(viewOnlyEnrichedGenes){
  goGenes <- suppressMessages(readr::read_tsv(rnaseqInfo$topGO)) %>% 
    dplyr::right_join(
      y = tibble::tibble(GO.ID = goTerms),
      by = "GO.ID"
    ) %>% 
    dplyr::select(
      termId = GO.ID, geneId = geneIds
    ) %>% 
    dplyr::mutate(
      geneId = stringr::str_split(geneId, ";")
    ) %>% 
    tidyr::unnest(cols = geneId)
}

geneset <- dplyr::left_join(x = goGenes, y = diffData, by = "geneId") %>% 
  dplyr::filter(
    abs(!!sym(col_lfc)) >= cutoff_lfc & !!sym(col_fdr) <= cutoff_fdr
  ) %>% 
  dplyr::mutate(
    !!sym(col_geneName) := if_else(
      condition = is.na(!!sym(col_geneName)), true = geneId, false = !!sym(col_geneName)
    )
  )

readr::write_tsv(x = geneset, file = paste(outPrefix, ".data.tab", sep = ""))
```

## Volcano plot

```{r}
#| fig-height: 8
#| fig-width: 8

if(length(unique(geneset$termId)) <= 9){
  termColor <- structure(
    .Data = RColorBrewer::brewer.pal(n = length(unique(geneset$termId)), name = "Set1"),
    names = unique(geneset$termId)
  )
} else{
  termColor <- base::structure(
    .Data = rainbow(n = length(unique(geneset$termId))),
    names = unique(geneset$termId)
  )
}


termColor <- termColor[!is.na(names(termColor))]

pt_vol <- volcano_plot(
  df = diffData, fdr_col = col_fdr, lfc_col = col_lfc,
  ylimit = 20, xlimit = c(-4, 4),
  fdr_cut = cutoff_fdr, lfc_cut = cutoff_lfc,
  title = plotTitle,
  highlightGenesets = split(x = geneset$geneId, f = geneset$termId),
  genesetColor = termColor
)

(
  pt_vol$plot <- pt_vol$plot +
    theme(
      axis.title = element_text(size = 22),
      axis.text = element_text(size = 20)
    ) +
    guides(color=guide_legend(ncol=4))
)

pdf(file = paste(outPrefix, ".volcano.pdf", sep = ""), width = 7, height = 9)
pt_vol$plot
dev.off()

```

## Heatmap of normalized counts

```{r}

geneSubset <- dplyr::left_join(x = geneset, y = rldCounts, by = "geneId") %>% 
  dplyr::mutate(id = row_number())

rownameCol <- col_geneName
showRowNames <- TRUE
rowNameFontSize <- 14
colNameFontSize <- 14


## fold change heatmap
foldChangeDf <- dplyr::select(geneSubset, id, !!col_lfc) %>%
  tibble::column_to_rownames(var = "id")

foldChangeMat <- data.matrix(foldChangeDf)

fcHeatmap <- Heatmap(
  matrix = foldChangeMat,
  col = colorRamp2(breaks = c(-3, 0, 3), colors = c("blue", "white", "red"), space = "LAB"),
  cluster_rows = TRUE,
  clustering_distance_rows = "euclidean",
  cluster_columns = FALSE,
  show_row_names = TRUE,
  row_labels = geneSubset$GENE_NAME,
  row_names_gp = gpar(fontsize = rowNameFontSize),
  column_names_gp = gpar(fontsize = colNameFontSize), 
  width = unit(2, "cm"),
  heatmap_legend_param = list(title = "\nlog2(fold_change)")
)


geneCounts <- dplyr::select(geneSubset, id, !!!sampleIds) %>%
  column_to_rownames(var = "id")

countMat <- data.matrix(geneCounts)

countZscoreMat <- chipmine::scale_matrix_rows(x = countMat)


## plot main rld score heatmap
rldZscoreHeatmap <- Heatmap(
  matrix = countZscoreMat,
  name = "countHt",
  col = colorRamp2(breaks = c(min(countZscoreMat), 0, max(countZscoreMat)),
                   colors = c("green", "black", "red"), space = "LAB"), 
  row_names_gp = gpar(fontsize = rowNameFontSize),
  column_names_gp = gpar(fontsize = colNameFontSize), 
  cluster_columns = FALSE,
  row_title_rot = 0,
  width = unit(10, "cm"), row_names_max_width = unit(15, "cm"), 
  heatmap_legend_param = list(title = "z-score(rlog counts)", color_bar = "continuous")
) 


htAn <- rowAnnotation(
  goTerm = geneSubset$termId,
  col = list(goTerm = termColor),
  show_legend = FALSE
)

## log2(fold_change) + rld heatmap with annotation
htList <- htAn + rldZscoreHeatmap + fcHeatmap 


# png(filename = paste(outPrefix, "_fc_rld_heatmap.png", sep = ""), width=6000, height=6000, res = 550)
pdf(file = paste(outPrefix, ".heatmap.pdf", sep = ""), width = 12, height = 14)

draw(object = htList,
     main_heatmap = "countHt",
     column_title = plotTitle,
     split = geneSubset$termId,
     show_row_dend = FALSE,
     # auto_adjust = FALSE,
     row_sub_title_side = "left",
     column_title_gp = gpar(fontsize = 14)
)

dev.off()

```

:::{.scrolling_y}

```{r, echo=FALSE}
#| fig-height: 12
#| fig-width: 12

draw(object = htList,
     main_heatmap = "countHt",
     column_title = plotTitle,
     split = geneSubset$termId,
     show_row_dend = FALSE,
     # auto_adjust = FALSE,
     row_sub_title_side = "left",
     column_title_gp = gpar(fontsize = 14)
)

```

:::

## Normalized read count bar chart

```{r}

genesetNormCounts <- dplyr::left_join(x = geneset, y = normCounts, by = "geneId") %>% 
  dplyr::select(termId, geneId, GENE_NAME, ends_with("_meanCount")) %>% 
  tidyr::pivot_longer(
    cols = c(ends_with("_meanCount")),
    names_to = c("group", ".value"),
    names_pattern = "(.*)_(meanCount)"
  ) %>% 
  dplyr::mutate(
    group = forcats::fct_relevel(group, rnaseqInfo$group1)
  )

pt_countBar <- ggplot2::ggplot(
  data = genesetNormCounts,
  mapping = aes(x = GENE_NAME, y = meanCount, fill = group)
) +
  geom_bar(
    stat = "identity", position = ggplot2::position_dodge2(),
    color = "black"
  ) +
  scale_fill_manual(
    values = c("white", "black") %>% purrr::set_names(c(rnaseqInfo$group1, rnaseqInfo$group2)),
  ) +
  facet_grid(facets = . ~ termId, scales = "free", space = "free") +
  theme_bw(base_size = 16) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    panel.grid = element_blank(),
    axis.title.x = element_blank(),
    legend.position = "bottom"
  )

ggsave(
  filename = paste(outPrefix, ".count_bar.pdf", sep = ""),
  plot = pt_countBar, width = 14, height = 6
)
```

:::{.scrolling_x .scrollable}

```{r, echo=FALSE}
#| fig-height: 6
#| fig-width: 12

pt_countBar
```

:::
